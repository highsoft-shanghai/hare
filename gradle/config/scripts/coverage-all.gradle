class CoverageExtension {
    @SuppressWarnings("unused")
        excludes = []
}

apply plugin: 'java'
apply plugin: 'jacoco'

project.ext.set('coverage', new CoverageExtension())

boolean isJacocoProject(Project aProject) {
    if (aProject.subprojects.size() > 0 && aProject.name != rootProject.name) return false
    return aProject.pluginManager.hasPlugin('jacoco')
}

//noinspection GrDeprecatedAPIUsage
task jacocoMerge(type: JacocoMerge) {
    var jacocoProjects = allprojects.findAll { isJacocoProject(it) } as Set<Project>
    dependsOn = jacocoProjects.jacocoTestReport
    jacocoProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
    reports {
        html.required = true
        xml.required = true
    }
}

task jacocoRootCoverageVerification(type: JacocoCoverageVerification, group: 'verification') {
    violationRules {
        rule {
            element = 'PACKAGE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

static SourceSet[] getMainSourceSets(Set<Project> projects) {
    return projects.collect({ it.sourceSets.main }).toArray(new SourceSet[0])
}

void setJacocoTaskOptions(JacocoReportBase jacocoTask) {
    jacocoTask.dependsOn(jacocoMerge)
    jacocoTask.sourceSets getMainSourceSets(allprojects.findAll { isJacocoProject(it) } as Set<Project>)
    jacocoTask.executionData.from(files("${buildDir}/jacoco/jacocoMerge.exec"))
    afterEvaluate {
        jacocoTask.classDirectories.setFrom(files(jacocoTask.classDirectories.files.collect {
            fileTree(dir: it, excludes: coverage.excludes)
        }))
    }
}

task testReport(type: TestReport, group: 'verification') {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn allprojects.findAll { isJacocoProject(it) } *.test
}

setJacocoTaskOptions(jacocoRootReport)
setJacocoTaskOptions(jacocoRootCoverageVerification)

jacocoRootReport.dependsOn(testReport)
jacocoRootCoverageVerification.dependsOn(jacocoRootReport)
check.dependsOn(jacocoRootCoverageVerification)
